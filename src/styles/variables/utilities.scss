@use './colors.scss' as colors;

// gutter padding for bootstrap

$grid-gutter-widths: (
    default: 0,
    xs: 1.5rem,
    sm: 1rem,
    md: 1.44rem,
    tabletmd: 1.56rem,
    lg: 2rem,
    xl: 2.25rem,
    xxl: 4.06rem,
);

@function gutter($breakpoint) {
    @return map-get($grid-gutter-widths, $breakpoint);
}

// flex containers

@mixin flex-container (
    $direction: column,
    $wrap: wrap,
    $justify:center,
    $align:center,

    ) {
    align-items: $align;
    display: flex;
    flex-direction: $direction;
    flex-wrap: $wrap;
    justify-content: $justify;
}

// gaps
$gap-sizes: (
    default: 0,
    mobilexs: 0.5rem,
    xs: 1rem,
    sm: 1.12rem,
    mobilemd: 1.5rem,
    mobilesm: 1.62rem,
    mobilelg: 2.56rem,
    tabletxs: 1.44rem,
    tabletsm: 1.56rem,
    tabletLoginsm: 2rem,
    tabletmd: 2.12rem,
    tabletlg: 2.44rem,
    tabletXl: 2.5rem,
    desktopSm: 2.19rem,
    md: 2.5rem,
    lg: 4rem,
    xl: 5rem,
    desktopLg: 5.19rem,
);

// text alignments

@mixin text-align($alignment:center) {
    text-align: $alignment;
}

// margin sizes

$margin-sizez: (
    default: 0,
    xs: 0.5rem,
    sm: 1rem,
    md: 1.5rem,
    lg: 2rem,
    xl: 2.5rem,
    xxl: 3rem,
);

@mixin margin($size: sm, $sides: all) {  // Add $sides parameter with default 'all'
    @if $sides == all {
      margin: map-get($margin-sizes, $size);
    } @else if $sides == 'x' {
      margin-left: map-get($margin-sizes, $size);
      margin-right: map-get($margin-sizes, $size);
    } @else if $sides == 'y' {
      margin-top: map-get($margin-sizes, $size);
      margin-bottom: map-get($margin-sizes, $size);
    } @else {
      @each $side in $sides {
        @if $side == top {
          margin-top: map-get($margin-sizes, $size);
        } @else if $side == right {
          margin-right: map-get($margin-sizes, $size);
        } @else if $side == bottom {
          margin-bottom: map-get($margin-sizes, $size);
        } @else if $side == left {
          margin-left: map-get($margin-sizes, $size);
        } @else {
          @warn "Invalid margin side: #{$side}";
        }
      }
    }
  }

// button styles

@mixin button-style(
    $padding: 1rem,
    $backgroundColor: colors.colorTheme(app-red),
    $color: colors.colorTheme(app-white),
    $border-radius: 0.375rem,
    $hover-color: colors.colorTheme(app-white),
    $border: none,
    $cursor: pointer,
){
    padding: $padding;
    background-color: $backgroundColor;
    color: $color;
    border: $border;
    border-radius: $border-radius;
    cursor: $cursor;


    &:hover {
        background-color: $color;
        color: color.colorsTheme(app-black);
    }
}

@mixin bookmark-style(
    $backgroundColor: colors.colorTheme(app-dark-blue),
    $border: none,
    $borderRadius: 50%,
){
    background-color: $backgroundColor;
    border: $border;
    border-radius: $borderRadius;

    &:hover {
        background-color: colors.colorTheme(app-white);
    }

    &:active {
        background-color: $backgroundColor;
    }
}

@mixin input-styles(
    $font-size: 1.5rem,
    $color: colors.colorTheme(app-white),
) {
    font-size: $font-size;
    color: $color;

    &::placeholder {
        font-size: 0.9375rem;
        color: $color;
        opacity: 0.5;
    }

    &:active {
        caret-color: colors.colorTheme(app-red);
    }
}